from datetime import datetime
from llama_index.core.query_pipeline import QueryPipeline as QP
from llama_index.legacy.service_context import ServiceContext
from llama_index.core import VectorStoreIndex, load_index_from_storage
from sqlalchemy import text
from llama_index.core.schema import TextNode
from llama_index.core.storage import StorageContext
import os
from pathlib import Path
from typing import Dict
from llama_index.core.retrievers import SQLRetriever
from typing import List
from llama_index.core.query_pipeline import FnComponent

from llama_index.core.query_pipeline import (
    QueryPipeline as QP,
    Link,
    InputComponent,
    CustomQueryComponent,
)
from llama_index.core.workflow import Workflow
from pyvis.network import Network
from llama_index.core.retrievers import SQLRetriever
from typing import List
from llama_index.core.query_pipeline import FnComponent

from llama_index.core.prompts.default_prompts import DEFAULT_TEXT_TO_SQL_PROMPT
from llama_index.core.prompts import PromptTemplate
from llama_index.core.query_pipeline import FnComponent
from llama_index.core.llms import ChatResponse
import pandas as pd
from pathlib import Path

import json
import os

# put data into sqlite db
from sqlalchemy import (
    create_engine,
    MetaData,
    Table,
    Column,
    String,
    Integer,
)
import re
from llama_index.core.objects import (
    SQLTableNodeMapping,
    ObjectIndex,
    SQLTableSchema,
)
from llama_index.core import SQLDatabase, VectorStoreIndex
from llama_index.llms.openai import OpenAI

from llama_index.core.query_pipeline import (
    QueryPipeline as QP,
    Link,
    InputComponent,
    CustomQueryComponent,
)

# -*- coding: utf-8 -*-
"""Advanced Query Pipelines over Tabular Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fRkgSn2PSlXSMgLk32beldVnLMLtI1Pc

"""




"""# Query Pipeline for Advanced Text-to-SQL

In this guide we show you how to setup a text-to-SQL pipeline over your data with our [query pipeline](https://docs.llamaindex.ai/en/stable/module_guides/querying/pipeline/root.html) syntax.

This gives you flexibility to enhance text-to-SQL with additional techniques. We show these in the below sections:
1. **Query-Time Table Retrieval**: Dynamically retrieve relevant tables in the text-to-SQL prompt.
2. **Query-Time Sample Row retrieval**: Embed/Index each row, and dynamically retrieve example rows for each table in the text-to-SQL prompt.

Our out-of-the box pipelines include our `NLSQLTableQueryEngine` and `SQLTableRetrieverQueryEngine`. (if you want to check out our text-to-SQL guide using these modules, take a look [here](https://docs.llamaindex.ai/en/stable/examples/index_structs/struct_indices/SQLIndexDemo.html)). This guide implements an advanced version of those modules, giving you the utmost flexibility to apply this to your own setting.

## Load and Ingest Data


### Load Data
We use the [WikiTableQuestions dataset](https://ppasupat.github.io/WikiTableQuestions/) (Pasupat and Liang 2015) as our test dataset.

We go through all the csv's in one folder, store each in a sqlite database (we will then build an object index over each table schema).
"""

#!wget "https://github.com/ppasupat/WikiTableQuestions/releases/download/v1.0.2/WikiTableQuestions-1.0.2-compact.zip" -O data.zip
#!unzip -o data.zip


#engine = create_engine("sqlite:///:memory:")

# Get the environment variables
host = os.getenv('MYSQL_DB_HOST')
user = os.getenv('MYSQL_DB_USER')
password = os.getenv('MYSQL_DB_PASSWORD')
database = os.getenv('MYSQL_SALES_DB_NAME')

# Construct the connection string
connection_string = f"mysql+pymysql://{user}:{password}@{host}/{database}"

# Create the engine
engine = create_engine(connection_string)

metadata_obj = MetaData()
""" for idx, df in enumerate(dfs):
    tableinfo = _get_tableinfo_with_index(idx)
    print(f"Creating table: {tableinfo.table_name}")
    create_table_from_dataframe(df, tableinfo.table_name, engine, metadata_obj)
 """
# setup Arize Phoenix for logging/observability
""" import phoenix as px
import llama_index

px.launch_app()
llama_index.set_global_handler("arize_phoenix") """

"""## Advanced Capability 1: Text-to-SQL with Query-Time Table Retrieval.

We now show you how to setup an e2e text-to-SQL with table retrieval.

### Define Modules

Here we define the core modules.
1. Object index + retriever to store table schemas
2. SQLDatabase object to connect to the above tables + SQLRetriever.
3. Text-to-SQL Prompt
4. Response synthesis Prompt
5. LLM

Object index, retriever, SQLDatabase
"""


sql_database = SQLDatabase(engine)

"""
Store the table schema in an index so that during query time we can retrieve the right schema,
using the SQLTableNodeMapping object, 
which takes in a SQLDatabase and produces a Node object 
for each SQLTableSchema object passed into the ObjectIndex constructor."""

table_node_mapping = SQLTableNodeMapping(sql_database)
""" table_schema_objs = [
    SQLTableSchema(table_name=t.table_name, context_str=t.table_summary)
    for t in table_infos
]  # add a SQLTableSchema for each table
 """
""" The ObjectIndex class is one that allows for the indexing of arbitrary Python objects. 
As such, it is quite flexible and applicable to a wide-range of use cases. As examples:
Use an ObjectIndex to index Tool objects to then be used by an agent.
Use an ObjectIndex to index a SQLTableSchema objects
To construct an ObjectIndex, we require an index as well as another abstraction, 
namely ObjectNodeMapping. This mapping, as its name suggests, 
provides the means to go between node and the associated object, and vice versa. 
Alternatively, there exists a from_objects() class method, 
that can conveniently construct an ObjectIndex from a set of objects.
 """

""" obj_index = ObjectIndex.from_objects(
    table_schema_objs,
    table_node_mapping,
    VectorStoreIndex,
)
obj_retriever = obj_index.as_retriever(similarity_top_k=3)
 """
"""SQLRetriever + Table Parser"""

sql_retriever = SQLRetriever(sql_database)

#table_parser_component = FnComponent(fn=get_table_context_str)

"""Text-to-SQL Prompt + Output Parser"""

#sql_parser_component = FnComponent(fn=parse_response_to_sql)

"""Response Synthesis Prompt"""
""" 
response_synthesis_prompt_str = (
    "Given an input question, synthesize a response from the query results.\n"
    "Query: {query_str}\n"
    "SQL: {sql_query}\n"
    "SQL Response: {context_str}\n"
    "Response: "
)
response_synthesis_prompt = PromptTemplate(
    response_synthesis_prompt_str,
)
 """

llm = OpenAI(model="gpt-4o-mini")

"""### Define Query Pipeline

Now that the components are in place, let's define the query pipeline!
"""


# query pipeline DEPRECATED
""" qp = QP(
    modules={
        "input": InputComponent(),
        #"table_retriever": obj_retriever,
        #"table_output_parser": table_parser_component,
        #"text2sql_prompt": text2sql_prompt,
        "text2sql_llm": llm,
        #"sql_output_parser": sql_parser_component,
        "sql_retriever": sql_retriever,
        #"response_synthesis_prompt": response_synthesis_prompt,
        "response_synthesis_llm": llm,
    },
    verbose=True,
) """

""" qp.add_chain(["input", "table_retriever", "table_output_parser"])
qp.add_link("input", "text2sql_prompt", dest_key="query_str")
qp.add_link("table_output_parser", "text2sql_prompt", dest_key="schema")
qp.add_chain(
    ["text2sql_prompt", "text2sql_llm", "sql_output_parser", "sql_retriever"]
)
qp.add_link(
    "sql_output_parser", "response_synthesis_prompt", dest_key="sql_query"
)
qp.add_link(
    "sql_retriever", "response_synthesis_prompt", dest_key="context_str"
)
qp.add_link("input", "response_synthesis_prompt", dest_key="query_str")
qp.add_link("response_synthesis_prompt", "response_synthesis_llm") """

"""### Visualize Query Pipeline

A really nice property of the query pipeline syntax is you can easily visualize it in a graph via networkx.
"""

# from pyvis.network import Network
""" 
net = Network(notebook=True, cdn_resources="in_line", directed=True)
net.from_nx(qp.dag)
net.show("text2sql_dag.html") """

"""### Run Some Queries!

Now we're ready to run some queries across this entire pipeline.
"""
# QUERIES

""" response = qp.run(
    query="What was the year that The Notorious B.I.G was signed to Bad Boy?"
)
print(str(response))

response = qp.run(query="Who won best director in the 1972 academy awards")
print(str(response))

response = qp.run(query="What was the term of Pasquale Preziosa?")
print(str(response)) """




## 2. Advanced Capability 2: Text-to-SQL with Query-Time Row Retrieval (along with Table Retrieval)
"""
One problem in the previous example is that if the user asks a query that asks for "The Notorious BIG" 
but the artist is stored as "The Notorious B.I.G", 
then the generated SELECT statement will likely not return any matches.
We can alleviate this problem by fetching a small number of example rows per table. 
A naive option would be to just take the first k rows. 
Instead, we embed, index, and retrieve k relevant rows given the user query 
to give the text-to-SQL LLM the most contextually relevant information for SQL generation.
We now extend our query pipeline.
"""

# DEPRECATED qp = QP(verbose=True)
class qp(Workflow):
    pass


# NOTE: service context will be deprecated in v0.10 (though will still be backwards compatible)
#service_context = ServiceContext.from_defaults(callback_manager=qp.callback_manager)

"""### Index Each Table

We embed/index the rows of each table, resulting in one index per table.
"""


table_names = ['CATEGORÍAS CAJA', 'CATEGORÍAS PRODUCTOS', 'CLIENTES', 'COLORES', 'CONTROL DE PRECIOS', 'ESTADOS', 'IVA', 'MÉTODOS DE PAGO', 'PEDIDOS', 'PERSONAL', 'PRODUCTOS', 'PROVEEDORES']
# no indexd: CAJA, CHEQUES, PRODUCTOS PEDIDOS, STOCK, CUENTAS CORRIENTES

def index_all_tables(
    sql_database: SQLDatabase, table_index_dir: str = "./table_indices"
) -> Dict[str, VectorStoreIndex]:
    """Index all tables."""
    if not Path(table_index_dir).exists():
        os.makedirs(table_index_dir)

    vector_index_dict = {}
    engine = sql_database.engine
    for table_name in table_names: #sql_database.get_usable_table_names():
        print(f"Indexing rows in table: {table_name}")

        if not os.path.exists(f"{table_index_dir}/{table_name}"):
            # get all rows from table
            with engine.connect() as conn:

                columns_query=(
                    f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{table_name}'"
                    f"AND TABLE_SCHEMA = '{database}'"
                )

                cursor = conn.execute(text(columns_query))
                result = cursor.fetchall()
                columns = []
                for column in result:
                    columns.append(column[0]) # get the first and only element of the tuple (the name)

                cursor = conn.execute(text(f'SELECT * FROM `{table_name}`'))
                result = cursor.fetchall()
                row_tups = []
                for row in result:
                    row_tups.append(tuple(row))
                    #print(dict(zip(columns, row)))

            # index each row, put into vector store index
            # TODO: CHECK THIS LINE: metadata
            nodes = [
                TextNode(text=str(t), 
                         metadata=dict(zip(columns, 
                                           #check rows types
                                           [str(value) if isinstance(value, datetime) else value 
                                            for value in row]
                                           ))) 
                for t in row_tups]

            # put into vector store index (use OpenAIEmbeddings by default)
            index = VectorStoreIndex(nodes) #service_context=service_context

            # save index
            index.set_index_id("vector_index")
            index.storage_context.persist(f"{table_index_dir}/{table_name}")
        else:
            print('index already exists')
            # rebuild storage context
            storage_context = StorageContext.from_defaults(
                persist_dir=f"{table_index_dir}/{table_name}"
            )
            # load index
            index = load_index_from_storage(
                storage_context, index_id="vector_index") #service_context=service_context
            
        vector_index_dict[table_name] = index

    return vector_index_dict


vector_index_dict = index_all_tables(sql_database)

test_retriever = vector_index_dict["CLIENTES"].as_retriever(
    similarity_top_k=1
)
nodes = test_retriever.retrieve("cliente")
print(nodes[0].get_content(metadata_mode="dict"))
print(nodes[0].metadata)

"""### Define Expanded Table Parser Component

We expand the capability of our `table_parser_component` to not only return the relevant table schemas, but also return relevant rows per table schema.

It now takes in both `table_schema_objs` (output of table retriever), but also the original `query_str` which will then be used for vector retrieval of relevant rows.
"""


def get_table_context_and_rows_str(
    query_str: str, table_schema_objs: List[SQLTableSchema]
):
    """Get table context string."""
    context_strs = []
    for table_schema_obj in table_schema_objs:
        # first append table info + additional context
        table_info = sql_database.get_single_table_info(
            table_schema_obj.table_name
        )
        if table_schema_obj.context_str:
            table_opt_context = " The table description is: "
            table_opt_context += table_schema_obj.context_str
            table_info += table_opt_context

        # also lookup vector index to return relevant table rows
        vector_retriever = vector_index_dict[
            table_schema_obj.table_name
        ].as_retriever(similarity_top_k=2)
        relevant_nodes = vector_retriever.retrieve(query_str)
        if len(relevant_nodes) > 0:
            table_row_context = "\nHere are some relevant example rows (values in the same order as columns above)\n"
            for node in relevant_nodes:
                table_row_context += str(node.get_content()) + "\n"
            table_info += table_row_context

        context_strs.append(table_info)
    return "\n\n".join(context_strs)


table_parser_component = FnComponent(fn=get_table_context_and_rows_str)

"""### Define Expanded Query Pipeline

This looks similar to the query pipeline in section 1, but with an upgraded table_parser_component.
"""


# THIS HAS TO BE REPLACED WITH A WORKFLOW
""" qp.add_modules({
    "input": InputComponent(),
    "table_retriever": obj_retriever,
    "table_output_parser": table_parser_component,
    "text2sql_prompt": text2sql_prompt,
    "text2sql_llm": llm,
    "sql_output_parser": sql_parser_component,
    "sql_retriever": sql_retriever,
    "response_synthesis_prompt": response_synthesis_prompt,
    "response_synthesis_llm": llm,
})

qp.add_link("input", "table_retriever")
qp.add_link("input", "table_output_parser", dest_key="query_str")
qp.add_link(
    "table_retriever", "table_output_parser", dest_key="table_schema_objs"
)
qp.add_link("input", "text2sql_prompt", dest_key="query_str")
qp.add_link("table_output_parser", "text2sql_prompt", dest_key="schema")
qp.add_chain(
    ["text2sql_prompt", "text2sql_llm", "sql_output_parser", "sql_retriever"]
)
qp.add_link(
    "sql_output_parser", "response_synthesis_prompt", dest_key="sql_query"
)
qp.add_link(
    "sql_retriever", "response_synthesis_prompt", dest_key="context_str"
)
qp.add_link("input", "response_synthesis_prompt", dest_key="query_str")
qp.add_link("response_synthesis_prompt", "response_synthesis_llm")

 """

""" net = Network(notebook=True, cdn_resources="in_line", directed=True)
net.from_nx(qp.dag)
net.show("text2sql_dag.html") """

"""### Run Some Queries

We can now ask about relevant entries even if it doesn't exactly match the entry in the database.
"""

response = qp.run(
    query="What was the year that The Notorious BIG was signed to Bad Boy?"
)
print(str(response))

